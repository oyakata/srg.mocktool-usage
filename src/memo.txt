Test Duble Pattern
=============================
1. Stub: 返却値を恣意的に操作する。
2. Fake: 本物と同等の振る舞いをより低コストで提供する。
         但しテストの実行に対して最適化されている。
3. Mock: 振る舞い全体を恣意的に操作する。
         恣意的に操作されたことを確かめる仕組みを提供する。
4. Dummy: 簡易に利用可能なテスト対象物の引数。
5. Spy: 内部に隠蔽された振る舞いが呼び出されたことを記録する。
        テストの確認フェーズでは記録の有無を確かめる。


MockとSpyの違い
------------------------------
Mockはテスト対象物の返却値や実行後のOUTPUTを確かめるケースで使う。
テスト対象物の処理過程でテストしにくい部分を恣意的に操作したい場合にMockに置き換える。
そして、恣意的に操作されたことを記録しておき、後で確かめる。

なぜMockが使われたことを確かめるのかというと、

* Mockに置き換えたつもりが、置き換えられていない。
* Mockに置き換わっていないつもりが、置き換わっている。

これらが起きていないことを保証する為。

これに対し、Spyは任意のオブジェクトの振る舞いを恣意的に操作しない。
単にある操作が呼び出されたことを確かめる仕組みが提供されていない場合に
確認可能な仕組みを注入するだけ。
テスト対象物の振る舞いを変えたり、結果を恣意的に操作したりしない。


MockとFakeの違い
------------------------------
Fakeもテスト対象物の振る舞いを変えない。
基本的にFakeを使う場合と使わない場合に一切差異があってはならない。
差異が許されるのはそれがテストの観点において無視できる場合に限る。

Fakeの典型例はインメモリデータベースと言われる。
通常、永続化層としてデータベースを使う場合はファイルなどに状態を残しておくが、
インメモリではプロセス終了後に消えてしまう。
テストではテストケースの実行時だけデータが残っていればいいので
高速な動作を期待して利用される。


FakeとSpyの違い
------------------------------
Fakeはテストしやすさを向上するためのもの。
Spyはプログラマがテストしたいポイントを確認可能にするためのもの。
Fakeは使わなくてもテストできるが、Spyは使わないとテストできない場合に用いられる。


DummyとFake
------------------------------
DummyもFakeと同様、テスタビリティの向上のために使われる。
つまり、本来使わなくてもテストは実行可能である点で共通する。
両者の違いはDummyはデータの提供を、Fakeは振る舞いの提供を目的とする点。
Dummyはテストにとって都合のいいデータ。
Fakeはテストの実行条件や実行速度を改善する。
